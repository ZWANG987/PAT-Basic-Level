/***
1031. 查验身份证(15)

时间限制
200 ms
内存限制
65536 kB
代码长度限制
8000 B
判题程序
Standard
作者
CHEN, Yue
一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：

首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：

Z：0 1 2 3 4 5 6 7 8 9 10
M：1 0 X 9 8 7 6 5 4 3 2

现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。

输入格式：

输入第一行给出正整数N（<= 100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。

输出格式：

按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出“All passed”。

输入样例1：
4
320124198808240056
12010X198901011234
110108196711301866
37070419881216001X
输出样例1：
12010X198901011234
110108196711301866
37070419881216001X
输入样例2：
2
320124198808240056
110108196711301862
输出样例2：
All passed
***/

#include<iostream>
#include<string>
using namespace std;
int check1 (string s) {
    int i;
    for (i=0; i<17; i++) {
        if (s[i]<'0' || s[i]>'9') {
            return 0;
        }
    }
    return 1;
}
int check2 (string s) {
    int i, sum=0;
    int a[17]={7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2};
    char z[11]={'1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'};
    for (i=0; i<17; i++)
        sum=sum+(s[i]-'0')*a[i];
    sum%=11;
    if (z[sum] != s[17])
        return 0;
    return 1;
}
int main() {
    int n, i, num=0, flag1=0, flag2=0;
    string s1[105], s2[105];
    cin>>n;
    for (i=0; i<n; i++) {
        cin>>s1[i];
        flag1 = check1 (s1[i]);
        if (flag1 == 1)
            flag2 = check2 (s1[i]);
        if (flag2 == 0) {
            s2[num]=s1[i];
            num++;
        }
        flag1=0;
        flag2=0;
    }
    if (num == 0)
        cout<<"All passed";
    else if (num != 0) {
        for (i=0; i<num-1; i++)
            cout<<s2[i]<<endl;
        cout<<s2[num-1];
    }
    return 0;
}
